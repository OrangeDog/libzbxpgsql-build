# zabbix_agent_bench keyfile for libzbxpgsql
# see: https://github.com/cavaliercoder/zabbix_agent_bench
# requires v0.3.0+
#
# run a simple pass/fail test with:
#   zabbix_agent_bench -keys zabbix_agent_bench.keys -iterations=1 -strict

pg.modver
pg.connect[{%PGCONN},{%PGDATABASE}]
pg.version[{%PGCONN},{%PGDATABASE}]
pg.starttime[{%PGCONN},{%PGDATABASE}]
pg.uptime[{%PGCONN},{%PGDATABASE}]

pg.setting.discovery[{%PGCONN},{%PGDATABASE}]
    pg.setting[{%PGCONN},{%PGDATABASE},{#SETTING}]

pg.query.string[{%PGCONN},{%PGDATABASE},"SELECT $1::text || $2::text;",hello,world]
pg.query.integer[{%PGCONN},{%PGDATABASE},"SELECT $1::int;",1234]
pg.query.double[{%PGCONN},{%PGDATABASE},"SELECT $1::decimal;",12.34]
pg.query.discovery[{%PGCONN},{%PGDATABASE},SELECT * FROM pg_database]
# test new query config
pg.query.string[{%PGCONN},{%PGDATABASE},teststr,hello,world]
pg.query.integer[{%PGCONN},{%PGDATABASE},testint,1234]
pg.query.double[{%PGCONN},{%PGDATABASE},testdbl,12.34]
pg.query.discovery[{%PGCONN},{%PGDATABASE},testdsc]

pg.backends.count[{%PGCONN},{%PGDATABASE}]
pg.backends.count[{%PGCONN},{%PGDATABASE},postgres]
pg.backends.count[{%PGCONN},{%PGDATABASE},,postgres]
pg.backends.count[{%PGCONN},{%PGDATABASE},,,192.168.59.103]
pg.backends.count[{%PGCONN},{%PGDATABASE},,,,true]
pg.backends.count[{%PGCONN},{%PGDATABASE},postgres,postgres,192.168.59.3,false]

pg.queries.longest[{%PGCONN},{%PGDATABASE}]
pg.queries.longest[{%PGCONN},{%PGDATABASE},{%PGDATABASE}]
pg.queries.longest[{%PGCONN},{%PGDATABASE},,{%PGDATABASE}]
pg.queries.longest[{%PGCONN},{%PGDATABASE},,,192.168.59.3]
pg.queries.longest[{%PGCONN},{%PGDATABASE},,,,true]
pg.queries.longest[{%PGCONN},{%PGDATABASE},{%PGDATABASE},{%PGDATABASE},192.168.59.3,false]

pg.checkpoints_timed[{%PGCONN},{%PGDATABASE}]
pg.checkpoints_req[{%PGCONN},{%PGDATABASE}]
# pg.checkpoint_write_time[{%PGCONN},{%PGDATABASE}]
# pg.checkpoint_sync_time[{%PGCONN},{%PGDATABASE}]
# pg.checkpoint_avg_interval[{%PGCONN},{%PGDATABASE}]
# pg.checkpoint_time_perc[{%PGCONN},{%PGDATABASE},all]
# pg.checkpoint_time_perc[{%PGCONN},{%PGDATABASE},write]
# pg.checkpoint_time_perc[{%PGCONN},{%PGDATABASE},sync]
pg.buffers_checkpoint[{%PGCONN},{%PGDATABASE}]
pg.buffers_clean[{%PGCONN},{%PGDATABASE}]
pg.maxwritten_clean[{%PGCONN},{%PGDATABASE}]
pg.buffers_backend[{%PGCONN},{%PGDATABASE}]
pg.buffers_backend_fsync[{%PGCONN},{%PGDATABASE}]
pg.buffers_alloc[{%PGCONN},{%PGDATABASE}]
pg.stats_reset[{%PGCONN},{%PGDATABASE}]

# tablespace discovery
pg.tablespace.discovery[{%PGCONN},{%PGDATABASE}]
    pg.tablespace.size[{%PGCONN},{%PGDATABASE},{#TABLESPACE}]

# database general
pg.db.blks_ratio[{%PGCONN},{%PGDATABASE}]
pg.db.size[{%PGCONN},{%PGDATABASE}]
pg.db.xid_age[{%PGCONN},{%PGDATABASE}]

# database discovery
pg.db.discovery[{%PGCONN},{%PGDATABASE}]
    pg.db.size[{%PGCONN},{%PGDATABASE},{#DATABASE}]
    pg.db.xid_age[{%PGCONN},{%PGDATABASE},{#DATABASE}]
    pg.db.numbackends[{%PGCONN},{%PGDATABASE},{#DATABASE}]
    pg.db.xact_commit[{%PGCONN},{%PGDATABASE},{#DATABASE}]
    pg.db.xact_rollback[{%PGCONN},{%PGDATABASE},{#DATABASE}]
    pg.db.blks_read[{%PGCONN},{%PGDATABASE},{#DATABASE}]
    pg.db.blks_hit[{%PGCONN},{%PGDATABASE},{#DATABASE}]
    pg.db.blks_ratio[{%PGCONN},{#DATABASE},{#DATABASE}]
    pg.db.tup_returned[{%PGCONN},{%PGDATABASE},{#DATABASE}]
    pg.db.tup_fetched[{%PGCONN},{%PGDATABASE},{#DATABASE}]
    pg.db.tup_inserted[{%PGCONN},{%PGDATABASE},{#DATABASE}]
    pg.db.tup_updated[{%PGCONN},{%PGDATABASE},{#DATABASE}]
    pg.db.tup_deleted[{%PGCONN},{%PGDATABASE},{#DATABASE}]
    pg.db.conflicts[{%PGCONN},{%PGDATABASE},{#DATABASE}]
    # pg.db.temp_files[{%PGCONN},{%PGDATABASE},{#DATABASE}]
    # pg.db.temp_bytes[{%PGCONN},{%PGDATABASE},{#DATABASE}]
    # pg.db.deadlocks[{%PGCONN},{%PGDATABASE},{#DATABASE}]
    # pg.db.blk_read_time[{%PGCONN},{%PGDATABASE},{#DATABASE}]
    # pg.db.blk_write_time[{%PGCONN},{%PGDATABASE},{#DATABASE}]
    pg.db.stats_reset[{%PGCONN},{%PGDATABASE},{#DATABASE}]

# schema discovery
pg.schema.discovery[{%PGCONN},{%PGDATABASE}]
    pg.schema.size[{%PGCONN},{#DATABASE},{#SCHEMA}]

# table discovery
pg.table.discovery[{%PGCONN},{%PGDATABASE}]
    pg.table.size[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.rows[{%PGCONN},{#DATABASE},{#TABLE}]

    pg.table.children.discovery[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.children[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.children.size[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.children.rows[{%PGCONN},{#DATABASE},{#TABLE}]
    
    pg.table.seq_scan[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.seq_tup_read[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.idx_scan[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.idx_scan_ratio[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.idx_tup_fetch[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.n_tup_ins[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.n_tup_upd[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.n_tup_del[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.n_tup_hot_upd[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.n_live_tup[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.n_dead_tup[{%PGCONN},{#DATABASE},{#TABLE}]
    # pg.table.n_mod_since_analyze[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.last_vacuum[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.last_autovacuum[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.last_analyze[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.last_autoanalyze[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.vacuum_count[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.autovacuum_count[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.analyze_count[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.autoanalyze_count[{%PGCONN},{#DATABASE},{#TABLE}]
    
    pg.table.heap_blks_read[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.heap_blks_hit[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.heap_blks_ratio[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.idx_blks_read[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.idx_blks_hit[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.idx_blks_ratio[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.toast_blks_read[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.toast_blks_hit[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.toast_blks_ratio[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.tidx_blks_read[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.tidx_blks_hit[{%PGCONN},{#DATABASE},{#TABLE}]
    pg.table.tidx_blks_ratio[{%PGCONN},{#DATABASE},{#TABLE}]

# sum totals for tables
pg.table.size[{%PGCONN},{%PGDATABASE}]
pg.table.seq_scan[{%PGCONN},{%PGDATABASE}]
pg.table.seq_tup_read[{%PGCONN},{%PGDATABASE}]
pg.table.idx_scan[{%PGCONN},{%PGDATABASE}]
pg.table.idx_scan_ratio[{%PGCONN},{%PGDATABASE}]
pg.table.idx_tup_fetch[{%PGCONN},{%PGDATABASE}]
pg.table.n_tup_ins[{%PGCONN},{%PGDATABASE}]
pg.table.n_tup_upd[{%PGCONN},{%PGDATABASE}]
pg.table.n_tup_del[{%PGCONN},{%PGDATABASE}]
pg.table.n_tup_hot_upd[{%PGCONN},{%PGDATABASE}]
pg.table.n_live_tup[{%PGCONN},{%PGDATABASE}]
pg.table.n_dead_tup[{%PGCONN},{%PGDATABASE}]
# pg.table.n_mod_since_analyze[{%PGCONN},{%PGDATABASE}]
pg.table.vacuum_count[{%PGCONN},{%PGDATABASE}]
pg.table.autovacuum_count[{%PGCONN},{%PGDATABASE}]
pg.table.analyze_count[{%PGCONN},{%PGDATABASE}]
pg.table.autoanalyze_count[{%PGCONN},{%PGDATABASE}]
pg.table.heap_blks_read[{%PGCONN},{%PGDATABASE}]
pg.table.heap_blks_hit[{%PGCONN},{%PGDATABASE}]
pg.table.heap_blks_ratio[{%PGCONN},{%PGDATABASE}]
pg.table.idx_blks_read[{%PGCONN},{%PGDATABASE}]
pg.table.idx_blks_hit[{%PGCONN},{%PGDATABASE}]
pg.table.idx_blks_ratio[{%PGCONN},{%PGDATABASE}]
pg.table.toast_blks_read[{%PGCONN},{%PGDATABASE}]
pg.table.toast_blks_hit[{%PGCONN},{%PGDATABASE}]
pg.table.toast_blks_ratio[{%PGCONN},{%PGDATABASE}]
pg.table.tidx_blks_read[{%PGCONN},{%PGDATABASE}]
pg.table.tidx_blks_hit[{%PGCONN},{%PGDATABASE}]
pg.table.tidx_blks_ratio[{%PGCONN},{%PGDATABASE}]

# index discovery
pg.index.discovery[{%PGCONN},{%PGDATABASE}]
    pg.index.size[{%PGCONN},{#DATABASE},{#INDEX}]
    pg.index.rows[{%PGCONN},{#DATABASE},{#INDEX}]
    
    pg.index.idx_scan[{%PGCONN},{#DATABASE},{#INDEX}]
    pg.index.idx_tup_read[{%PGCONN},{#DATABASE},{#INDEX}]
    pg.index.idx_tup_fetch[{%PGCONN},{#DATABASE},{#INDEX}]

    pg.index.idx_blks_read[{%PGCONN},{#DATABASE},{#INDEX}]
    pg.index.idx_blks_hit[{%PGCONN},{#DATABASE},{#INDEX}]
    pg.index.idx_blks_ratio[{%PGCONN},{#DATABASE},{#INDEX}]

pg.index.idx_blks_ratio[{%PGCONN},{%PGDATABASE}]
